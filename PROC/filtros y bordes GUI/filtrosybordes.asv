function varargout = filtrosybordes(varargin)
% FILTROSYBORDES MATLAB code for filtrosybordes.fig
%      FILTROSYBORDES, by itself, creates a new FILTROSYBORDES or raises the existing
%      singleton*.
%
%      H = FILTROSYBORDES returns the handle to a new FILTROSYBORDES or the handle to
%      the existing singleton*.
%
%      FILTROSYBORDES('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in FILTROSYBORDES.M with the given input arguments.
%
%      FILTROSYBORDES('Property','Value',...) creates a new FILTROSYBORDES or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before filtrosybordes_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to filtrosybordes_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help filtrosybordes

% Last Modified by GUIDE v2.5 16-Jan-2015 19:01:27

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @filtrosybordes_OpeningFcn, ...
                   'gui_OutputFcn',  @filtrosybordes_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before filtrosybordes is made visible.
function filtrosybordes_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to filtrosybordes (see VARARGIN)

% Choose default command line output for filtrosybordes
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes filtrosybordes wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = filtrosybordes_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in relieve.
function relieve_Callback(hObject, eventdata, handles)
   
    gris=rgb2gray(handles.a); %convertir a escala de grisis
    h=fspecial('prewitt'); %deteca los border
    b1=imfilter(gris,h); %aplciar filtro bordes horizontakles
    b2=imfilter(gris,h); %bore veritcales
    c=b1+b2; %une bordes
    axes(handles.axes2);
    imshow(c); %imprimir imagen con relieve
    
    
    
% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
    gris=rgb2gray(handles.a); %convertir a escala de grisis
    h=fspecial('prewitt'); %deteca los border
    b1=imfilter(gris,h); %aplciar filtro bordes horizontakles
    b2=imfilter(gris,h); %bore veritcales
    c=b1+b2; %une bordes
   d=max(max(c))-c;
   axes(handles.axes2);
    imshow(d);

% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)

    a=rgb2gray(handles.a);
b= edge(a,'sobel');
axes(handles.axes2);
imshow(b);



% --- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
    a=rgb2gray(handles.a);
b= edge(a,'prewitt');
axes(handles.axes2);
imshow(b);


% --- Executes on button press in pushbutton5.
function pushbutton5_Callback(hObject, eventdata, handles)
    a=rgb2gray(handles.a);
b= edge(a,'roberts');
axes(handles.axes2);
imshow(b);

% --- Executes on button press in pushbutton6.
function pushbutton6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton7.
function pushbutton7_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton8.
function pushbutton8_Callback(hObject, eventdata, handles)
global a;

[archivo ruta]=uigetfile({'*.gif';'*.jpg'},'abrir imagen');
if isequal(archivo,0)%si el usuario no eleige ningun archivo
 return 
else
 
    handles.a=imread(strcat(ruta,archivo));
    
    axes(handles.axes1);
    imshow(handles.a);
    guidata(gcbf, handles);
    msgbox('Se abrio con exito','mensaje');

 
    
end


% --- Executes on button press in pushbutton9.
function pushbutton9_Callback(hObject, eventdata, handles)
   cla(handles.axes1,'reset');
   cla(handles.axes2,'reset');

% --- Executes on button press in pushbutton10.
function pushbutton10_Callback(hObject, eventdata, handles)
canal = getimage(handles.axes2); 
[Filename Path]=uiputfile('*.jpg;*.bmp','Guardar');
if isequal(Filename,0)
    return;
else
  
        
        imwrite(canal,strcat(Path,Filename));
        msgbox('La imagen se guardo con éxito');
        
       % set(handles.mnuguardar,'Enable','off');  
          
end
% --- Executes on button press in pushbutton11.
function pushbutton11_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
